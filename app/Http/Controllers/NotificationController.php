<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Notification; // On importe le modÃ¨le Notification

class NotificationController extends Controller
{
    // ðŸ”¹ Enregistre une nouvelle notification (utilisÃ© par lâ€™admin)
    public function store(Request $request)
    {
        // Validation des donnÃ©es du formulaire
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'title' => 'required|string|max:255',
            'message' => 'required|string',
        ]);

        // CrÃ©ation de la notification dans la base
        Notification::create([
            'user_id' => $request->user_id,
            'title' => $request->title,
            'message' => $request->message,
        ]);

        // Retour au dashboard avec un message succÃ¨s
        return back()->with('success', 'Notification envoyÃ©e avec succÃ¨s !');
    }

    // ðŸ”¹ Liste les notifications du patient connectÃ©
    public function index()
    {
        // RÃ©cupÃ¨re les notifications triÃ©es par non lues et par date de crÃ©ation
        $notifications = Notification::where('user_id', auth()->id())
            ->orderByRaw('read_at is NULL desc') // Affiche les non lues en premier
            ->orderBy('created_at', 'desc') // Tri par date de crÃ©ation
            ->get();

        // Retourne la vue patient.notifications
        return view('patient.notifications', compact('notifications'));
    }

    // ðŸ”¹ Marquer une notification comme lue
    public function markAsRead($id)
    {
        // Cherche la notification par son ID
        $notification = Notification::findOrFail($id);

        // Marque la notification comme lue en mettant la date actuelle dans read_at
        $notification->read_at = now();
        $notification->save();

        // Retour Ã  la page des notifications avec un message de succÃ¨s
        return back()->with('success', 'Notification marquÃ©e comme lue');
    }

    // ðŸ”¹ Supprimer une notification
    public function destroy($id)
    {
        // Cherche la notification par son ID
        $notification = Notification::findOrFail($id);

        // Supprime la notification
        $notification->delete();

        // Retour Ã  la page des notifications avec un message de succÃ¨s
        return back()->with('success', 'Notification supprimÃ©e avec succÃ¨s');
    }

    // ðŸ”¹ Compter les notifications non lues
    public function countUnreadNotifications()
    {
        return Notification::where('user_id', auth()->id()) // Notifications de l'utilisateur connectÃ©
                           ->whereNull('read_at')  // `read_at` est NULL pour les notifications non lues
                           ->count(); // Compte les notifications non lues
    }
}
